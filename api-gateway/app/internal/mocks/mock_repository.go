// Code generated by MockGen. DO NOT EDIT.
// Source: api-gateway/internal/repository (interfaces: TabRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_repository.go -package=mocks api-gateway/internal/repository TabRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "api-gateway/internal/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTabRepository is a mock of TabRepository interface.
type MockTabRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTabRepositoryMockRecorder
	isgomock struct{}
}

// MockTabRepositoryMockRecorder is the mock recorder for MockTabRepository.
type MockTabRepositoryMockRecorder struct {
	mock *MockTabRepository
}

// NewMockTabRepository creates a new mock instance.
func NewMockTabRepository(ctrl *gomock.Controller) *MockTabRepository {
	mock := &MockTabRepository{ctrl: ctrl}
	mock.recorder = &MockTabRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTabRepository) EXPECT() *MockTabRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTabRepository) Create(ctx context.Context, tab *models.Tab) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tab)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTabRepositoryMockRecorder) Create(ctx, tab any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTabRepository)(nil).Create), ctx, tab)
}

// Delete mocks base method.
func (m *MockTabRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTabRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTabRepository)(nil).Delete), ctx, id)
}

// FindByNameLike mocks base method.
func (m *MockTabRepository) FindByNameLike(ctx context.Context, name string) ([]*models.Tab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameLike", ctx, name)
	ret0, _ := ret[0].([]*models.Tab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameLike indicates an expected call of FindByNameLike.
func (mr *MockTabRepositoryMockRecorder) FindByNameLike(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameLike", reflect.TypeOf((*MockTabRepository)(nil).FindByNameLike), ctx, name)
}

// GetByID mocks base method.
func (m *MockTabRepository) GetByID(ctx context.Context, id string) (*models.Tab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Tab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTabRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTabRepository)(nil).GetByID), ctx, id)
}
