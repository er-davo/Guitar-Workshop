// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: processor.proto

package audioproc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioProcessingConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Threshold     float32                `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Margin        int32                  `protobuf:"varint,2,opt,name=margin,proto3" json:"margin,omitempty"`
	HighPass      float32                `protobuf:"fixed32,3,opt,name=high_pass,json=highPass,proto3" json:"high_pass,omitempty"`
	UseBandpass   bool                   `protobuf:"varint,4,opt,name=use_bandpass,json=useBandpass,proto3" json:"use_bandpass,omitempty"`
	BandLow       float32                `protobuf:"fixed32,5,opt,name=band_low,json=bandLow,proto3" json:"band_low,omitempty"`
	BandHigh      float32                `protobuf:"fixed32,6,opt,name=band_high,json=bandHigh,proto3" json:"band_high,omitempty"`
	FadeSamples   int32                  `protobuf:"varint,7,opt,name=fade_samples,json=fadeSamples,proto3" json:"fade_samples,omitempty"`
	SampleRate    int32                  `protobuf:"varint,8,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioProcessingConfig) Reset() {
	*x = AudioProcessingConfig{}
	mi := &file_processor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioProcessingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioProcessingConfig) ProtoMessage() {}

func (x *AudioProcessingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_processor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioProcessingConfig.ProtoReflect.Descriptor instead.
func (*AudioProcessingConfig) Descriptor() ([]byte, []int) {
	return file_processor_proto_rawDescGZIP(), []int{0}
}

func (x *AudioProcessingConfig) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AudioProcessingConfig) GetMargin() int32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *AudioProcessingConfig) GetHighPass() float32 {
	if x != nil {
		return x.HighPass
	}
	return 0
}

func (x *AudioProcessingConfig) GetUseBandpass() bool {
	if x != nil {
		return x.UseBandpass
	}
	return false
}

func (x *AudioProcessingConfig) GetBandLow() float32 {
	if x != nil {
		return x.BandLow
	}
	return 0
}

func (x *AudioProcessingConfig) GetBandHigh() float32 {
	if x != nil {
		return x.BandHigh
	}
	return 0
}

func (x *AudioProcessingConfig) GetFadeSamples() int32 {
	if x != nil {
		return x.FadeSamples
	}
	return 0
}

func (x *AudioProcessingConfig) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

type ProcessAudioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WavData       []byte                 `protobuf:"bytes,1,opt,name=wav_data,json=wavData,proto3" json:"wav_data,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Config        *AudioProcessingConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessAudioRequest) Reset() {
	*x = ProcessAudioRequest{}
	mi := &file_processor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAudioRequest) ProtoMessage() {}

func (x *ProcessAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAudioRequest.ProtoReflect.Descriptor instead.
func (*ProcessAudioRequest) Descriptor() ([]byte, []int) {
	return file_processor_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessAudioRequest) GetWavData() []byte {
	if x != nil {
		return x.WavData
	}
	return nil
}

func (x *ProcessAudioRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ProcessAudioRequest) GetConfig() *AudioProcessingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ProcessAudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WavData       []byte                 `protobuf:"bytes,1,opt,name=wav_data,json=wavData,proto3" json:"wav_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessAudioResponse) Reset() {
	*x = ProcessAudioResponse{}
	mi := &file_processor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAudioResponse) ProtoMessage() {}

func (x *ProcessAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAudioResponse.ProtoReflect.Descriptor instead.
func (*ProcessAudioResponse) Descriptor() ([]byte, []int) {
	return file_processor_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessAudioResponse) GetWavData() []byte {
	if x != nil {
		return x.WavData
	}
	return nil
}

type SplitAudioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WavData       []byte                 `protobuf:"bytes,1,opt,name=wav_data,json=wavData,proto3" json:"wav_data,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Config        *ChunkingConfig        `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitAudioRequest) Reset() {
	*x = SplitAudioRequest{}
	mi := &file_processor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitAudioRequest) ProtoMessage() {}

func (x *SplitAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitAudioRequest.ProtoReflect.Descriptor instead.
func (*SplitAudioRequest) Descriptor() ([]byte, []int) {
	return file_processor_proto_rawDescGZIP(), []int{3}
}

func (x *SplitAudioRequest) GetWavData() []byte {
	if x != nil {
		return x.WavData
	}
	return nil
}

func (x *SplitAudioRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SplitAudioRequest) GetConfig() *ChunkingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ChunkingConfig struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SampleRate          int32                  `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Threshold           float32                `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	ChunkMinDurationSec float32                `protobuf:"fixed32,3,opt,name=chunk_min_duration_sec,json=chunkMinDurationSec,proto3" json:"chunk_min_duration_sec,omitempty"`
	ChunkMaxDurationSec float32                `protobuf:"fixed32,4,opt,name=chunk_max_duration_sec,json=chunkMaxDurationSec,proto3" json:"chunk_max_duration_sec,omitempty"`
	OverlapDurationSec  float32                `protobuf:"fixed32,5,opt,name=overlap_duration_sec,json=overlapDurationSec,proto3" json:"overlap_duration_sec,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ChunkingConfig) Reset() {
	*x = ChunkingConfig{}
	mi := &file_processor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkingConfig) ProtoMessage() {}

func (x *ChunkingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_processor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkingConfig.ProtoReflect.Descriptor instead.
func (*ChunkingConfig) Descriptor() ([]byte, []int) {
	return file_processor_proto_rawDescGZIP(), []int{4}
}

func (x *ChunkingConfig) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *ChunkingConfig) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ChunkingConfig) GetChunkMinDurationSec() float32 {
	if x != nil {
		return x.ChunkMinDurationSec
	}
	return 0
}

func (x *ChunkingConfig) GetChunkMaxDurationSec() float32 {
	if x != nil {
		return x.ChunkMaxDurationSec
	}
	return 0
}

func (x *ChunkingConfig) GetOverlapDurationSec() float32 {
	if x != nil {
		return x.OverlapDurationSec
	}
	return 0
}

type SplitAudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunks        []*AudioChunk          `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitAudioResponse) Reset() {
	*x = SplitAudioResponse{}
	mi := &file_processor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitAudioResponse) ProtoMessage() {}

func (x *SplitAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitAudioResponse.ProtoReflect.Descriptor instead.
func (*SplitAudioResponse) Descriptor() ([]byte, []int) {
	return file_processor_proto_rawDescGZIP(), []int{5}
}

func (x *SplitAudioResponse) GetChunks() []*AudioChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type AudioChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     float32                `protobuf:"fixed32,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	AudioData     []byte                 `protobuf:"bytes,2,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	mi := &file_processor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_processor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_processor_proto_rawDescGZIP(), []int{6}
}

func (x *AudioChunk) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AudioChunk) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

var File_processor_proto protoreflect.FileDescriptor

const file_processor_proto_rawDesc = "" +
	"\n" +
	"\x0fprocessor.proto\x12\taudioproc\"\x89\x02\n" +
	"\x15AudioProcessingConfig\x12\x1c\n" +
	"\tthreshold\x18\x01 \x01(\x02R\tthreshold\x12\x16\n" +
	"\x06margin\x18\x02 \x01(\x05R\x06margin\x12\x1b\n" +
	"\thigh_pass\x18\x03 \x01(\x02R\bhighPass\x12!\n" +
	"\fuse_bandpass\x18\x04 \x01(\bR\vuseBandpass\x12\x19\n" +
	"\bband_low\x18\x05 \x01(\x02R\abandLow\x12\x1b\n" +
	"\tband_high\x18\x06 \x01(\x02R\bbandHigh\x12!\n" +
	"\ffade_samples\x18\a \x01(\x05R\vfadeSamples\x12\x1f\n" +
	"\vsample_rate\x18\b \x01(\x05R\n" +
	"sampleRate\"\x87\x01\n" +
	"\x13ProcessAudioRequest\x12\x19\n" +
	"\bwav_data\x18\x01 \x01(\fR\awavData\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x128\n" +
	"\x06config\x18\x03 \x01(\v2 .audioproc.AudioProcessingConfigR\x06config\"1\n" +
	"\x14ProcessAudioResponse\x12\x19\n" +
	"\bwav_data\x18\x01 \x01(\fR\awavData\"~\n" +
	"\x11SplitAudioRequest\x12\x19\n" +
	"\bwav_data\x18\x01 \x01(\fR\awavData\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x121\n" +
	"\x06config\x18\x03 \x01(\v2\x19.audioproc.ChunkingConfigR\x06config\"\xeb\x01\n" +
	"\x0eChunkingConfig\x12\x1f\n" +
	"\vsample_rate\x18\x01 \x01(\x05R\n" +
	"sampleRate\x12\x1c\n" +
	"\tthreshold\x18\x02 \x01(\x02R\tthreshold\x123\n" +
	"\x16chunk_min_duration_sec\x18\x03 \x01(\x02R\x13chunkMinDurationSec\x123\n" +
	"\x16chunk_max_duration_sec\x18\x04 \x01(\x02R\x13chunkMaxDurationSec\x120\n" +
	"\x14overlap_duration_sec\x18\x05 \x01(\x02R\x12overlapDurationSec\"C\n" +
	"\x12SplitAudioResponse\x12-\n" +
	"\x06chunks\x18\x01 \x03(\v2\x15.audioproc.AudioChunkR\x06chunks\"J\n" +
	"\n" +
	"AudioChunk\x12\x1d\n" +
	"\n" +
	"start_time\x18\x01 \x01(\x02R\tstartTime\x12\x1d\n" +
	"\n" +
	"audio_data\x18\x02 \x01(\fR\taudioData2\xb8\x01\n" +
	"\x15AudioProcessorService\x12O\n" +
	"\fProcessAudio\x12\x1e.audioproc.ProcessAudioRequest\x1a\x1f.audioproc.ProcessAudioResponse\x12N\n" +
	"\x0fSplitIntoChunks\x12\x1c.audioproc.SplitAudioRequest\x1a\x1d.audioproc.SplitAudioResponseB\x1aZ\x18internal/proto/audioprocb\x06proto3"

var (
	file_processor_proto_rawDescOnce sync.Once
	file_processor_proto_rawDescData []byte
)

func file_processor_proto_rawDescGZIP() []byte {
	file_processor_proto_rawDescOnce.Do(func() {
		file_processor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_processor_proto_rawDesc), len(file_processor_proto_rawDesc)))
	})
	return file_processor_proto_rawDescData
}

var file_processor_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_processor_proto_goTypes = []any{
	(*AudioProcessingConfig)(nil), // 0: audioproc.AudioProcessingConfig
	(*ProcessAudioRequest)(nil),   // 1: audioproc.ProcessAudioRequest
	(*ProcessAudioResponse)(nil),  // 2: audioproc.ProcessAudioResponse
	(*SplitAudioRequest)(nil),     // 3: audioproc.SplitAudioRequest
	(*ChunkingConfig)(nil),        // 4: audioproc.ChunkingConfig
	(*SplitAudioResponse)(nil),    // 5: audioproc.SplitAudioResponse
	(*AudioChunk)(nil),            // 6: audioproc.AudioChunk
}
var file_processor_proto_depIdxs = []int32{
	0, // 0: audioproc.ProcessAudioRequest.config:type_name -> audioproc.AudioProcessingConfig
	4, // 1: audioproc.SplitAudioRequest.config:type_name -> audioproc.ChunkingConfig
	6, // 2: audioproc.SplitAudioResponse.chunks:type_name -> audioproc.AudioChunk
	1, // 3: audioproc.AudioProcessorService.ProcessAudio:input_type -> audioproc.ProcessAudioRequest
	3, // 4: audioproc.AudioProcessorService.SplitIntoChunks:input_type -> audioproc.SplitAudioRequest
	2, // 5: audioproc.AudioProcessorService.ProcessAudio:output_type -> audioproc.ProcessAudioResponse
	5, // 6: audioproc.AudioProcessorService.SplitIntoChunks:output_type -> audioproc.SplitAudioResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_processor_proto_init() }
func file_processor_proto_init() {
	if File_processor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_processor_proto_rawDesc), len(file_processor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_processor_proto_goTypes,
		DependencyIndexes: file_processor_proto_depIdxs,
		MessageInfos:      file_processor_proto_msgTypes,
	}.Build()
	File_processor_proto = out.File
	file_processor_proto_goTypes = nil
	file_processor_proto_depIdxs = nil
}
