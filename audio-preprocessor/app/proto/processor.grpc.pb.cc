// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/processor.proto

#include "processor.pb.h"
#include "processor.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace audioproc {

static const char* AudioProcessorService_method_names[] = {
  "/audioproc.AudioProcessorService/ProcessAudio",
  "/audioproc.AudioProcessorService/SplitIntoChunks",
};

std::unique_ptr< AudioProcessorService::Stub> AudioProcessorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AudioProcessorService::Stub> stub(new AudioProcessorService::Stub(channel, options));
  return stub;
}

AudioProcessorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessAudio_(AudioProcessorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SplitIntoChunks_(AudioProcessorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AudioProcessorService::Stub::ProcessAudio(::grpc::ClientContext* context, const ::audioproc::ProcessAudioRequest& request, ::audioproc::ProcessAudioResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::audioproc::ProcessAudioRequest, ::audioproc::ProcessAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessAudio_, context, request, response);
}

void AudioProcessorService::Stub::async::ProcessAudio(::grpc::ClientContext* context, const ::audioproc::ProcessAudioRequest* request, ::audioproc::ProcessAudioResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::audioproc::ProcessAudioRequest, ::audioproc::ProcessAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessAudio_, context, request, response, std::move(f));
}

void AudioProcessorService::Stub::async::ProcessAudio(::grpc::ClientContext* context, const ::audioproc::ProcessAudioRequest* request, ::audioproc::ProcessAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessAudio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::audioproc::ProcessAudioResponse>* AudioProcessorService::Stub::PrepareAsyncProcessAudioRaw(::grpc::ClientContext* context, const ::audioproc::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::audioproc::ProcessAudioResponse, ::audioproc::ProcessAudioRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessAudio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::audioproc::ProcessAudioResponse>* AudioProcessorService::Stub::AsyncProcessAudioRaw(::grpc::ClientContext* context, const ::audioproc::ProcessAudioRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessAudioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioProcessorService::Stub::SplitIntoChunks(::grpc::ClientContext* context, const ::audioproc::SplitAudioRequest& request, ::audioproc::SplitAudioResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::audioproc::SplitAudioRequest, ::audioproc::SplitAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SplitIntoChunks_, context, request, response);
}

void AudioProcessorService::Stub::async::SplitIntoChunks(::grpc::ClientContext* context, const ::audioproc::SplitAudioRequest* request, ::audioproc::SplitAudioResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::audioproc::SplitAudioRequest, ::audioproc::SplitAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SplitIntoChunks_, context, request, response, std::move(f));
}

void AudioProcessorService::Stub::async::SplitIntoChunks(::grpc::ClientContext* context, const ::audioproc::SplitAudioRequest* request, ::audioproc::SplitAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SplitIntoChunks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::audioproc::SplitAudioResponse>* AudioProcessorService::Stub::PrepareAsyncSplitIntoChunksRaw(::grpc::ClientContext* context, const ::audioproc::SplitAudioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::audioproc::SplitAudioResponse, ::audioproc::SplitAudioRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SplitIntoChunks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::audioproc::SplitAudioResponse>* AudioProcessorService::Stub::AsyncSplitIntoChunksRaw(::grpc::ClientContext* context, const ::audioproc::SplitAudioRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSplitIntoChunksRaw(context, request, cq);
  result->StartCall();
  return result;
}

AudioProcessorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioProcessorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioProcessorService::Service, ::audioproc::ProcessAudioRequest, ::audioproc::ProcessAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioProcessorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::audioproc::ProcessAudioRequest* req,
             ::audioproc::ProcessAudioResponse* resp) {
               return service->ProcessAudio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioProcessorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioProcessorService::Service, ::audioproc::SplitAudioRequest, ::audioproc::SplitAudioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioProcessorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::audioproc::SplitAudioRequest* req,
             ::audioproc::SplitAudioResponse* resp) {
               return service->SplitIntoChunks(ctx, req, resp);
             }, this)));
}

AudioProcessorService::Service::~Service() {
}

::grpc::Status AudioProcessorService::Service::ProcessAudio(::grpc::ServerContext* context, const ::audioproc::ProcessAudioRequest* request, ::audioproc::ProcessAudioResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioProcessorService::Service::SplitIntoChunks(::grpc::ServerContext* context, const ::audioproc::SplitAudioRequest* request, ::audioproc::SplitAudioResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace audioproc

