// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/processor.proto
// Protobuf C++ Version: 5.27.0

#include "processor.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace audioproc {

inline constexpr ProcessAudioResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : wav_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ProcessAudioResponse::ProcessAudioResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ProcessAudioResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessAudioResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessAudioResponseDefaultTypeInternal() {}
  union {
    ProcessAudioResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessAudioResponseDefaultTypeInternal _ProcessAudioResponse_default_instance_;

inline constexpr ChunkingConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sample_rate_{0},
        threshold_{0},
        chunk_min_duration_sec_{0},
        chunk_max_duration_sec_{0},
        overlap_duration_sec_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChunkingConfig::ChunkingConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChunkingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkingConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkingConfigDefaultTypeInternal() {}
  union {
    ChunkingConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkingConfigDefaultTypeInternal _ChunkingConfig_default_instance_;

inline constexpr AudioProcessingConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : threshold_{0},
        margin_{0},
        high_pass_{0},
        use_bandpass_{false},
        band_low_{0},
        band_high_{0},
        fade_samples_{0},
        sample_rate_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AudioProcessingConfig::AudioProcessingConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioProcessingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioProcessingConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioProcessingConfigDefaultTypeInternal() {}
  union {
    AudioProcessingConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioProcessingConfigDefaultTypeInternal _AudioProcessingConfig_default_instance_;

inline constexpr AudioChunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : audio_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AudioChunk::AudioChunk(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkDefaultTypeInternal() {}
  union {
    AudioChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;

inline constexpr SplitAudioResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : chunks_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SplitAudioResponse::SplitAudioResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SplitAudioResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitAudioResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitAudioResponseDefaultTypeInternal() {}
  union {
    SplitAudioResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitAudioResponseDefaultTypeInternal _SplitAudioResponse_default_instance_;

inline constexpr SplitAudioRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        wav_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SplitAudioRequest::SplitAudioRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SplitAudioRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitAudioRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitAudioRequestDefaultTypeInternal() {}
  union {
    SplitAudioRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitAudioRequestDefaultTypeInternal _SplitAudioRequest_default_instance_;

inline constexpr ProcessAudioRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        wav_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ProcessAudioRequest::ProcessAudioRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ProcessAudioRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessAudioRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessAudioRequestDefaultTypeInternal() {}
  union {
    ProcessAudioRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessAudioRequestDefaultTypeInternal _ProcessAudioRequest_default_instance_;
}  // namespace audioproc
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fprocessor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fprocessor_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2fprocessor_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.threshold_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.margin_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.high_pass_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.use_bandpass_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.band_low_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.band_high_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.fade_samples_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioProcessingConfig, _impl_.sample_rate_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ProcessAudioRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ProcessAudioRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::audioproc::ProcessAudioRequest, _impl_.wav_data_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ProcessAudioRequest, _impl_.file_name_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ProcessAudioRequest, _impl_.config_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::audioproc::ProcessAudioResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::audioproc::ProcessAudioResponse, _impl_.wav_data_),
        PROTOBUF_FIELD_OFFSET(::audioproc::SplitAudioRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::audioproc::SplitAudioRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::audioproc::SplitAudioRequest, _impl_.wav_data_),
        PROTOBUF_FIELD_OFFSET(::audioproc::SplitAudioRequest, _impl_.file_name_),
        PROTOBUF_FIELD_OFFSET(::audioproc::SplitAudioRequest, _impl_.config_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::audioproc::ChunkingConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::audioproc::ChunkingConfig, _impl_.sample_rate_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ChunkingConfig, _impl_.threshold_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ChunkingConfig, _impl_.chunk_min_duration_sec_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ChunkingConfig, _impl_.chunk_max_duration_sec_),
        PROTOBUF_FIELD_OFFSET(::audioproc::ChunkingConfig, _impl_.overlap_duration_sec_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::audioproc::SplitAudioResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::audioproc::SplitAudioResponse, _impl_.chunks_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioChunk, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioChunk, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::audioproc::AudioChunk, _impl_.audio_data_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::audioproc::AudioProcessingConfig)},
        {16, 27, -1, sizeof(::audioproc::ProcessAudioRequest)},
        {30, -1, -1, sizeof(::audioproc::ProcessAudioResponse)},
        {39, 50, -1, sizeof(::audioproc::SplitAudioRequest)},
        {53, -1, -1, sizeof(::audioproc::ChunkingConfig)},
        {66, -1, -1, sizeof(::audioproc::SplitAudioResponse)},
        {75, -1, -1, sizeof(::audioproc::AudioChunk)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::audioproc::_AudioProcessingConfig_default_instance_._instance,
    &::audioproc::_ProcessAudioRequest_default_instance_._instance,
    &::audioproc::_ProcessAudioResponse_default_instance_._instance,
    &::audioproc::_SplitAudioRequest_default_instance_._instance,
    &::audioproc::_ChunkingConfig_default_instance_._instance,
    &::audioproc::_SplitAudioResponse_default_instance_._instance,
    &::audioproc::_AudioChunk_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fprocessor_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025proto/processor.proto\022\taudioproc\"\263\001\n\025A"
    "udioProcessingConfig\022\021\n\tthreshold\030\001 \001(\002\022"
    "\016\n\006margin\030\002 \001(\005\022\021\n\thigh_pass\030\003 \001(\002\022\024\n\014us"
    "e_bandpass\030\004 \001(\010\022\020\n\010band_low\030\005 \001(\002\022\021\n\tba"
    "nd_high\030\006 \001(\002\022\024\n\014fade_samples\030\007 \001(\005\022\023\n\013s"
    "ample_rate\030\010 \001(\005\"l\n\023ProcessAudioRequest\022"
    "\020\n\010wav_data\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\t\0220\n\006"
    "config\030\003 \001(\0132 .audioproc.AudioProcessing"
    "Config\"(\n\024ProcessAudioResponse\022\020\n\010wav_da"
    "ta\030\001 \001(\014\"c\n\021SplitAudioRequest\022\020\n\010wav_dat"
    "a\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\t\022)\n\006config\030\003 \001"
    "(\0132\031.audioproc.ChunkingConfig\"\226\001\n\016Chunki"
    "ngConfig\022\023\n\013sample_rate\030\001 \001(\005\022\021\n\tthresho"
    "ld\030\002 \001(\002\022\036\n\026chunk_min_duration_sec\030\003 \001(\002"
    "\022\036\n\026chunk_max_duration_sec\030\004 \001(\002\022\034\n\024over"
    "lap_duration_sec\030\005 \001(\002\";\n\022SplitAudioResp"
    "onse\022%\n\006chunks\030\001 \003(\0132\025.audioproc.AudioCh"
    "unk\"4\n\nAudioChunk\022\022\n\nstart_time\030\001 \001(\002\022\022\n"
    "\naudio_data\030\002 \001(\0142\270\001\n\025AudioProcessorServ"
    "ice\022O\n\014ProcessAudio\022\036.audioproc.ProcessA"
    "udioRequest\032\037.audioproc.ProcessAudioResp"
    "onse\022N\n\017SplitIntoChunks\022\034.audioproc.Spli"
    "tAudioRequest\032\035.audioproc.SplitAudioResp"
    "onseB\032Z\030internal/proto/audioprocb\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2fprocessor_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2fprocessor_2eproto = {
    false,
    false,
    960,
    descriptor_table_protodef_proto_2fprocessor_2eproto,
    "proto/processor.proto",
    &descriptor_table_proto_2fprocessor_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_proto_2fprocessor_2eproto::offsets,
    file_level_enum_descriptors_proto_2fprocessor_2eproto,
    file_level_service_descriptors_proto_2fprocessor_2eproto,
};
namespace audioproc {
// ===================================================================

class AudioProcessingConfig::_Internal {
 public:
};

AudioProcessingConfig::AudioProcessingConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:audioproc.AudioProcessingConfig)
}
AudioProcessingConfig::AudioProcessingConfig(
    ::google::protobuf::Arena* arena, const AudioProcessingConfig& from)
    : AudioProcessingConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AudioProcessingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AudioProcessingConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, threshold_),
           0,
           offsetof(Impl_, sample_rate_) -
               offsetof(Impl_, threshold_) +
               sizeof(Impl_::sample_rate_));
}
AudioProcessingConfig::~AudioProcessingConfig() {
  // @@protoc_insertion_point(destructor:audioproc.AudioProcessingConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioProcessingConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AudioProcessingConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_._cached_size_),
              false,
          },
          &AudioProcessingConfig::MergeImpl,
          &AudioProcessingConfig::kDescriptorMethods,
          &descriptor_table_proto_2fprocessor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> AudioProcessingConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AudioProcessingConfig_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::audioproc::AudioProcessingConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 sample_rate = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AudioProcessingConfig, _impl_.sample_rate_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.sample_rate_)}},
    // float threshold = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.threshold_)}},
    // int32 margin = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AudioProcessingConfig, _impl_.margin_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.margin_)}},
    // float high_pass = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.high_pass_)}},
    // bool use_bandpass = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AudioProcessingConfig, _impl_.use_bandpass_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.use_bandpass_)}},
    // float band_low = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.band_low_)}},
    // float band_high = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.band_high_)}},
    // int32 fade_samples = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AudioProcessingConfig, _impl_.fade_samples_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.fade_samples_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float threshold = 1;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 margin = 2;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.margin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float high_pass = 3;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.high_pass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool use_bandpass = 4;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.use_bandpass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float band_low = 5;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.band_low_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float band_high = 6;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.band_high_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 fade_samples = 7;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.fade_samples_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sample_rate = 8;
    {PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.sample_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AudioProcessingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:audioproc.AudioProcessingConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.threshold_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sample_rate_) -
      reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.sample_rate_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AudioProcessingConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audioproc.AudioProcessingConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float threshold = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  ::uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_threshold(), target);
  }

  // int32 margin = 2;
  if (this->_internal_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_margin(), target);
  }

  // float high_pass = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_high_pass = this->_internal_high_pass();
  ::uint32_t raw_high_pass;
  memcpy(&raw_high_pass, &tmp_high_pass, sizeof(tmp_high_pass));
  if (raw_high_pass != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_high_pass(), target);
  }

  // bool use_bandpass = 4;
  if (this->_internal_use_bandpass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_use_bandpass(), target);
  }

  // float band_low = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_band_low = this->_internal_band_low();
  ::uint32_t raw_band_low;
  memcpy(&raw_band_low, &tmp_band_low, sizeof(tmp_band_low));
  if (raw_band_low != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_band_low(), target);
  }

  // float band_high = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_band_high = this->_internal_band_high();
  ::uint32_t raw_band_high;
  memcpy(&raw_band_high, &tmp_band_high, sizeof(tmp_band_high));
  if (raw_band_high != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_band_high(), target);
  }

  // int32 fade_samples = 7;
  if (this->_internal_fade_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_fade_samples(), target);
  }

  // int32 sample_rate = 8;
  if (this->_internal_sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audioproc.AudioProcessingConfig)
  return target;
}

::size_t AudioProcessingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audioproc.AudioProcessingConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // float threshold = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  ::uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    total_size += 5;
  }

  // int32 margin = 2;
  if (this->_internal_margin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_margin());
  }

  // float high_pass = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_high_pass = this->_internal_high_pass();
  ::uint32_t raw_high_pass;
  memcpy(&raw_high_pass, &tmp_high_pass, sizeof(tmp_high_pass));
  if (raw_high_pass != 0) {
    total_size += 5;
  }

  // bool use_bandpass = 4;
  if (this->_internal_use_bandpass() != 0) {
    total_size += 2;
  }

  // float band_low = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_band_low = this->_internal_band_low();
  ::uint32_t raw_band_low;
  memcpy(&raw_band_low, &tmp_band_low, sizeof(tmp_band_low));
  if (raw_band_low != 0) {
    total_size += 5;
  }

  // float band_high = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_band_high = this->_internal_band_high();
  ::uint32_t raw_band_high;
  memcpy(&raw_band_high, &tmp_band_high, sizeof(tmp_band_high));
  if (raw_band_high != 0) {
    total_size += 5;
  }

  // int32 fade_samples = 7;
  if (this->_internal_fade_samples() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_fade_samples());
  }

  // int32 sample_rate = 8;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sample_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AudioProcessingConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioProcessingConfig*>(&to_msg);
  auto& from = static_cast<const AudioProcessingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:audioproc.AudioProcessingConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_threshold = from._internal_threshold();
  ::uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    _this->_impl_.threshold_ = from._impl_.threshold_;
  }
  if (from._internal_margin() != 0) {
    _this->_impl_.margin_ = from._impl_.margin_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_high_pass = from._internal_high_pass();
  ::uint32_t raw_high_pass;
  memcpy(&raw_high_pass, &tmp_high_pass, sizeof(tmp_high_pass));
  if (raw_high_pass != 0) {
    _this->_impl_.high_pass_ = from._impl_.high_pass_;
  }
  if (from._internal_use_bandpass() != 0) {
    _this->_impl_.use_bandpass_ = from._impl_.use_bandpass_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_band_low = from._internal_band_low();
  ::uint32_t raw_band_low;
  memcpy(&raw_band_low, &tmp_band_low, sizeof(tmp_band_low));
  if (raw_band_low != 0) {
    _this->_impl_.band_low_ = from._impl_.band_low_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_band_high = from._internal_band_high();
  ::uint32_t raw_band_high;
  memcpy(&raw_band_high, &tmp_band_high, sizeof(tmp_band_high));
  if (raw_band_high != 0) {
    _this->_impl_.band_high_ = from._impl_.band_high_;
  }
  if (from._internal_fade_samples() != 0) {
    _this->_impl_.fade_samples_ = from._impl_.fade_samples_;
  }
  if (from._internal_sample_rate() != 0) {
    _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioProcessingConfig::CopyFrom(const AudioProcessingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audioproc.AudioProcessingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudioProcessingConfig::InternalSwap(AudioProcessingConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.sample_rate_)
      + sizeof(AudioProcessingConfig::_impl_.sample_rate_)
      - PROTOBUF_FIELD_OFFSET(AudioProcessingConfig, _impl_.threshold_)>(
          reinterpret_cast<char*>(&_impl_.threshold_),
          reinterpret_cast<char*>(&other->_impl_.threshold_));
}

::google::protobuf::Metadata AudioProcessingConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ProcessAudioRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ProcessAudioRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_._has_bits_);
};

ProcessAudioRequest::ProcessAudioRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:audioproc.ProcessAudioRequest)
}
inline PROTOBUF_NDEBUG_INLINE ProcessAudioRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::audioproc::ProcessAudioRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        wav_data_(arena, from.wav_data_),
        file_name_(arena, from.file_name_) {}

ProcessAudioRequest::ProcessAudioRequest(
    ::google::protobuf::Arena* arena,
    const ProcessAudioRequest& from)
    : ::google::protobuf::Message(arena) {
  ProcessAudioRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::audioproc::AudioProcessingConfig>(
                              arena, *from._impl_.config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:audioproc.ProcessAudioRequest)
}
inline PROTOBUF_NDEBUG_INLINE ProcessAudioRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        wav_data_(arena),
        file_name_(arena) {}

inline void ProcessAudioRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.config_ = {};
}
ProcessAudioRequest::~ProcessAudioRequest() {
  // @@protoc_insertion_point(destructor:audioproc.ProcessAudioRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProcessAudioRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.wav_data_.Destroy();
  _impl_.file_name_.Destroy();
  delete _impl_.config_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ProcessAudioRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_._cached_size_),
              false,
          },
          &ProcessAudioRequest::MergeImpl,
          &ProcessAudioRequest::kDescriptorMethods,
          &descriptor_table_proto_2fprocessor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 47, 2> ProcessAudioRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ProcessAudioRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::audioproc::ProcessAudioRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes wav_data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_.wav_data_)}},
    // string file_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_.file_name_)}},
    // .audioproc.AudioProcessingConfig config = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes wav_data = 1;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_.wav_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string file_name = 2;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_.file_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .audioproc.AudioProcessingConfig config = 3;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioRequest, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::audioproc::AudioProcessingConfig>()},
  }}, {{
    "\35\0\11\0\0\0\0\0"
    "audioproc.ProcessAudioRequest"
    "file_name"
  }},
};

PROTOBUF_NOINLINE void ProcessAudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:audioproc.ProcessAudioRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wav_data_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ProcessAudioRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audioproc.ProcessAudioRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes wav_data = 1;
  if (!this->_internal_wav_data().empty()) {
    const std::string& _s = this->_internal_wav_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    const std::string& _s = this->_internal_file_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "audioproc.ProcessAudioRequest.file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .audioproc.AudioProcessingConfig config = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.config_, _impl_.config_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audioproc.ProcessAudioRequest)
  return target;
}

::size_t ProcessAudioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audioproc.ProcessAudioRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // bytes wav_data = 1;
  if (!this->_internal_wav_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_wav_data());
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_file_name());
  }

  // .audioproc.AudioProcessingConfig config = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ProcessAudioRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ProcessAudioRequest*>(&to_msg);
  auto& from = static_cast<const ProcessAudioRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:audioproc.ProcessAudioRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_wav_data().empty()) {
    _this->_internal_set_wav_data(from._internal_wav_data());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.config_ != nullptr);
    if (_this->_impl_.config_ == nullptr) {
      _this->_impl_.config_ =
          ::google::protobuf::Message::CopyConstruct<::audioproc::AudioProcessingConfig>(arena, *from._impl_.config_);
    } else {
      _this->_impl_.config_->MergeFrom(*from._impl_.config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioRequest::CopyFrom(const ProcessAudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audioproc.ProcessAudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ProcessAudioRequest::InternalSwap(ProcessAudioRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wav_data_, &other->_impl_.wav_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, &other->_impl_.file_name_, arena);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata ProcessAudioRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ProcessAudioResponse::_Internal {
 public:
};

ProcessAudioResponse::ProcessAudioResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:audioproc.ProcessAudioResponse)
}
inline PROTOBUF_NDEBUG_INLINE ProcessAudioResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::audioproc::ProcessAudioResponse& from_msg)
      : wav_data_(arena, from.wav_data_),
        _cached_size_{0} {}

ProcessAudioResponse::ProcessAudioResponse(
    ::google::protobuf::Arena* arena,
    const ProcessAudioResponse& from)
    : ::google::protobuf::Message(arena) {
  ProcessAudioResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:audioproc.ProcessAudioResponse)
}
inline PROTOBUF_NDEBUG_INLINE ProcessAudioResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : wav_data_(arena),
        _cached_size_{0} {}

inline void ProcessAudioResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ProcessAudioResponse::~ProcessAudioResponse() {
  // @@protoc_insertion_point(destructor:audioproc.ProcessAudioResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProcessAudioResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.wav_data_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ProcessAudioResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ProcessAudioResponse, _impl_._cached_size_),
              false,
          },
          &ProcessAudioResponse::MergeImpl,
          &ProcessAudioResponse::kDescriptorMethods,
          &descriptor_table_proto_2fprocessor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ProcessAudioResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ProcessAudioResponse_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::audioproc::ProcessAudioResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes wav_data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ProcessAudioResponse, _impl_.wav_data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes wav_data = 1;
    {PROTOBUF_FIELD_OFFSET(ProcessAudioResponse, _impl_.wav_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ProcessAudioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:audioproc.ProcessAudioResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wav_data_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ProcessAudioResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audioproc.ProcessAudioResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes wav_data = 1;
  if (!this->_internal_wav_data().empty()) {
    const std::string& _s = this->_internal_wav_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audioproc.ProcessAudioResponse)
  return target;
}

::size_t ProcessAudioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audioproc.ProcessAudioResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes wav_data = 1;
  if (!this->_internal_wav_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_wav_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ProcessAudioResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ProcessAudioResponse*>(&to_msg);
  auto& from = static_cast<const ProcessAudioResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:audioproc.ProcessAudioResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_wav_data().empty()) {
    _this->_internal_set_wav_data(from._internal_wav_data());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessAudioResponse::CopyFrom(const ProcessAudioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audioproc.ProcessAudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ProcessAudioResponse::InternalSwap(ProcessAudioResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wav_data_, &other->_impl_.wav_data_, arena);
}

::google::protobuf::Metadata ProcessAudioResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SplitAudioRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SplitAudioRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_._has_bits_);
};

SplitAudioRequest::SplitAudioRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:audioproc.SplitAudioRequest)
}
inline PROTOBUF_NDEBUG_INLINE SplitAudioRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::audioproc::SplitAudioRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        wav_data_(arena, from.wav_data_),
        file_name_(arena, from.file_name_) {}

SplitAudioRequest::SplitAudioRequest(
    ::google::protobuf::Arena* arena,
    const SplitAudioRequest& from)
    : ::google::protobuf::Message(arena) {
  SplitAudioRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::audioproc::ChunkingConfig>(
                              arena, *from._impl_.config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:audioproc.SplitAudioRequest)
}
inline PROTOBUF_NDEBUG_INLINE SplitAudioRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        wav_data_(arena),
        file_name_(arena) {}

inline void SplitAudioRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.config_ = {};
}
SplitAudioRequest::~SplitAudioRequest() {
  // @@protoc_insertion_point(destructor:audioproc.SplitAudioRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SplitAudioRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.wav_data_.Destroy();
  _impl_.file_name_.Destroy();
  delete _impl_.config_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SplitAudioRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_._cached_size_),
              false,
          },
          &SplitAudioRequest::MergeImpl,
          &SplitAudioRequest::kDescriptorMethods,
          &descriptor_table_proto_2fprocessor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 45, 2> SplitAudioRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SplitAudioRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::audioproc::SplitAudioRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes wav_data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_.wav_data_)}},
    // string file_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_.file_name_)}},
    // .audioproc.ChunkingConfig config = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes wav_data = 1;
    {PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_.wav_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string file_name = 2;
    {PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_.file_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .audioproc.ChunkingConfig config = 3;
    {PROTOBUF_FIELD_OFFSET(SplitAudioRequest, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::audioproc::ChunkingConfig>()},
  }}, {{
    "\33\0\11\0\0\0\0\0"
    "audioproc.SplitAudioRequest"
    "file_name"
  }},
};

PROTOBUF_NOINLINE void SplitAudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:audioproc.SplitAudioRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wav_data_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SplitAudioRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audioproc.SplitAudioRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes wav_data = 1;
  if (!this->_internal_wav_data().empty()) {
    const std::string& _s = this->_internal_wav_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    const std::string& _s = this->_internal_file_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "audioproc.SplitAudioRequest.file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .audioproc.ChunkingConfig config = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.config_, _impl_.config_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audioproc.SplitAudioRequest)
  return target;
}

::size_t SplitAudioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audioproc.SplitAudioRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // bytes wav_data = 1;
  if (!this->_internal_wav_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_wav_data());
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_file_name());
  }

  // .audioproc.ChunkingConfig config = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SplitAudioRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SplitAudioRequest*>(&to_msg);
  auto& from = static_cast<const SplitAudioRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:audioproc.SplitAudioRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_wav_data().empty()) {
    _this->_internal_set_wav_data(from._internal_wav_data());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.config_ != nullptr);
    if (_this->_impl_.config_ == nullptr) {
      _this->_impl_.config_ =
          ::google::protobuf::Message::CopyConstruct<::audioproc::ChunkingConfig>(arena, *from._impl_.config_);
    } else {
      _this->_impl_.config_->MergeFrom(*from._impl_.config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SplitAudioRequest::CopyFrom(const SplitAudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audioproc.SplitAudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SplitAudioRequest::InternalSwap(SplitAudioRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wav_data_, &other->_impl_.wav_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, &other->_impl_.file_name_, arena);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata SplitAudioRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChunkingConfig::_Internal {
 public:
};

ChunkingConfig::ChunkingConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:audioproc.ChunkingConfig)
}
ChunkingConfig::ChunkingConfig(
    ::google::protobuf::Arena* arena, const ChunkingConfig& from)
    : ChunkingConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ChunkingConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ChunkingConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sample_rate_),
           0,
           offsetof(Impl_, overlap_duration_sec_) -
               offsetof(Impl_, sample_rate_) +
               sizeof(Impl_::overlap_duration_sec_));
}
ChunkingConfig::~ChunkingConfig() {
  // @@protoc_insertion_point(destructor:audioproc.ChunkingConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChunkingConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ChunkingConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_._cached_size_),
              false,
          },
          &ChunkingConfig::MergeImpl,
          &ChunkingConfig::kDescriptorMethods,
          &descriptor_table_proto_2fprocessor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> ChunkingConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChunkingConfig_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::audioproc::ChunkingConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 sample_rate = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkingConfig, _impl_.sample_rate_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.sample_rate_)}},
    // float threshold = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.threshold_)}},
    // float chunk_min_duration_sec = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.chunk_min_duration_sec_)}},
    // float chunk_max_duration_sec = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.chunk_max_duration_sec_)}},
    // float overlap_duration_sec = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.overlap_duration_sec_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 sample_rate = 1;
    {PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.sample_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float threshold = 2;
    {PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float chunk_min_duration_sec = 3;
    {PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.chunk_min_duration_sec_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float chunk_max_duration_sec = 4;
    {PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.chunk_max_duration_sec_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float overlap_duration_sec = 5;
    {PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.overlap_duration_sec_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ChunkingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:audioproc.ChunkingConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sample_rate_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.overlap_duration_sec_) -
      reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.overlap_duration_sec_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ChunkingConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audioproc.ChunkingConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 sample_rate = 1;
  if (this->_internal_sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_sample_rate(), target);
  }

  // float threshold = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  ::uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_threshold(), target);
  }

  // float chunk_min_duration_sec = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chunk_min_duration_sec = this->_internal_chunk_min_duration_sec();
  ::uint32_t raw_chunk_min_duration_sec;
  memcpy(&raw_chunk_min_duration_sec, &tmp_chunk_min_duration_sec, sizeof(tmp_chunk_min_duration_sec));
  if (raw_chunk_min_duration_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_chunk_min_duration_sec(), target);
  }

  // float chunk_max_duration_sec = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chunk_max_duration_sec = this->_internal_chunk_max_duration_sec();
  ::uint32_t raw_chunk_max_duration_sec;
  memcpy(&raw_chunk_max_duration_sec, &tmp_chunk_max_duration_sec, sizeof(tmp_chunk_max_duration_sec));
  if (raw_chunk_max_duration_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_chunk_max_duration_sec(), target);
  }

  // float overlap_duration_sec = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_overlap_duration_sec = this->_internal_overlap_duration_sec();
  ::uint32_t raw_overlap_duration_sec;
  memcpy(&raw_overlap_duration_sec, &tmp_overlap_duration_sec, sizeof(tmp_overlap_duration_sec));
  if (raw_overlap_duration_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_overlap_duration_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audioproc.ChunkingConfig)
  return target;
}

::size_t ChunkingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audioproc.ChunkingConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 sample_rate = 1;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sample_rate());
  }

  // float threshold = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  ::uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    total_size += 5;
  }

  // float chunk_min_duration_sec = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chunk_min_duration_sec = this->_internal_chunk_min_duration_sec();
  ::uint32_t raw_chunk_min_duration_sec;
  memcpy(&raw_chunk_min_duration_sec, &tmp_chunk_min_duration_sec, sizeof(tmp_chunk_min_duration_sec));
  if (raw_chunk_min_duration_sec != 0) {
    total_size += 5;
  }

  // float chunk_max_duration_sec = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chunk_max_duration_sec = this->_internal_chunk_max_duration_sec();
  ::uint32_t raw_chunk_max_duration_sec;
  memcpy(&raw_chunk_max_duration_sec, &tmp_chunk_max_duration_sec, sizeof(tmp_chunk_max_duration_sec));
  if (raw_chunk_max_duration_sec != 0) {
    total_size += 5;
  }

  // float overlap_duration_sec = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_overlap_duration_sec = this->_internal_overlap_duration_sec();
  ::uint32_t raw_overlap_duration_sec;
  memcpy(&raw_overlap_duration_sec, &tmp_overlap_duration_sec, sizeof(tmp_overlap_duration_sec));
  if (raw_overlap_duration_sec != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ChunkingConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChunkingConfig*>(&to_msg);
  auto& from = static_cast<const ChunkingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:audioproc.ChunkingConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sample_rate() != 0) {
    _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_threshold = from._internal_threshold();
  ::uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    _this->_impl_.threshold_ = from._impl_.threshold_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chunk_min_duration_sec = from._internal_chunk_min_duration_sec();
  ::uint32_t raw_chunk_min_duration_sec;
  memcpy(&raw_chunk_min_duration_sec, &tmp_chunk_min_duration_sec, sizeof(tmp_chunk_min_duration_sec));
  if (raw_chunk_min_duration_sec != 0) {
    _this->_impl_.chunk_min_duration_sec_ = from._impl_.chunk_min_duration_sec_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chunk_max_duration_sec = from._internal_chunk_max_duration_sec();
  ::uint32_t raw_chunk_max_duration_sec;
  memcpy(&raw_chunk_max_duration_sec, &tmp_chunk_max_duration_sec, sizeof(tmp_chunk_max_duration_sec));
  if (raw_chunk_max_duration_sec != 0) {
    _this->_impl_.chunk_max_duration_sec_ = from._impl_.chunk_max_duration_sec_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_overlap_duration_sec = from._internal_overlap_duration_sec();
  ::uint32_t raw_overlap_duration_sec;
  memcpy(&raw_overlap_duration_sec, &tmp_overlap_duration_sec, sizeof(tmp_overlap_duration_sec));
  if (raw_overlap_duration_sec != 0) {
    _this->_impl_.overlap_duration_sec_ = from._impl_.overlap_duration_sec_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkingConfig::CopyFrom(const ChunkingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audioproc.ChunkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChunkingConfig::InternalSwap(ChunkingConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.overlap_duration_sec_)
      + sizeof(ChunkingConfig::_impl_.overlap_duration_sec_)
      - PROTOBUF_FIELD_OFFSET(ChunkingConfig, _impl_.sample_rate_)>(
          reinterpret_cast<char*>(&_impl_.sample_rate_),
          reinterpret_cast<char*>(&other->_impl_.sample_rate_));
}

::google::protobuf::Metadata ChunkingConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SplitAudioResponse::_Internal {
 public:
};

SplitAudioResponse::SplitAudioResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:audioproc.SplitAudioResponse)
}
inline PROTOBUF_NDEBUG_INLINE SplitAudioResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::audioproc::SplitAudioResponse& from_msg)
      : chunks_{visibility, arena, from.chunks_},
        _cached_size_{0} {}

SplitAudioResponse::SplitAudioResponse(
    ::google::protobuf::Arena* arena,
    const SplitAudioResponse& from)
    : ::google::protobuf::Message(arena) {
  SplitAudioResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:audioproc.SplitAudioResponse)
}
inline PROTOBUF_NDEBUG_INLINE SplitAudioResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : chunks_{visibility, arena},
        _cached_size_{0} {}

inline void SplitAudioResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SplitAudioResponse::~SplitAudioResponse() {
  // @@protoc_insertion_point(destructor:audioproc.SplitAudioResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SplitAudioResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SplitAudioResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SplitAudioResponse, _impl_._cached_size_),
              false,
          },
          &SplitAudioResponse::MergeImpl,
          &SplitAudioResponse::kDescriptorMethods,
          &descriptor_table_proto_2fprocessor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SplitAudioResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SplitAudioResponse_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::audioproc::SplitAudioResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .audioproc.AudioChunk chunks = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SplitAudioResponse, _impl_.chunks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .audioproc.AudioChunk chunks = 1;
    {PROTOBUF_FIELD_OFFSET(SplitAudioResponse, _impl_.chunks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::audioproc::AudioChunk>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SplitAudioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:audioproc.SplitAudioResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SplitAudioResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audioproc.SplitAudioResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .audioproc.AudioChunk chunks = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_chunks_size());
       i < n; i++) {
    const auto& repfield = this->_internal_chunks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audioproc.SplitAudioResponse)
  return target;
}

::size_t SplitAudioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audioproc.SplitAudioResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .audioproc.AudioChunk chunks = 1;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->_internal_chunks()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SplitAudioResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SplitAudioResponse*>(&to_msg);
  auto& from = static_cast<const SplitAudioResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:audioproc.SplitAudioResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_chunks()->MergeFrom(
      from._internal_chunks());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SplitAudioResponse::CopyFrom(const SplitAudioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audioproc.SplitAudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SplitAudioResponse::InternalSwap(SplitAudioResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunks_.InternalSwap(&other->_impl_.chunks_);
}

::google::protobuf::Metadata SplitAudioResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:audioproc.AudioChunk)
}
inline PROTOBUF_NDEBUG_INLINE AudioChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::audioproc::AudioChunk& from_msg)
      : audio_data_(arena, from.audio_data_),
        _cached_size_{0} {}

AudioChunk::AudioChunk(
    ::google::protobuf::Arena* arena,
    const AudioChunk& from)
    : ::google::protobuf::Message(arena) {
  AudioChunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.start_time_ = from._impl_.start_time_;

  // @@protoc_insertion_point(copy_constructor:audioproc.AudioChunk)
}
inline PROTOBUF_NDEBUG_INLINE AudioChunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : audio_data_(arena),
        _cached_size_{0} {}

inline void AudioChunk::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.start_time_ = {};
}
AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:audioproc.AudioChunk)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioChunk::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.audio_data_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AudioChunk::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AudioChunk, _impl_._cached_size_),
              false,
          },
          &AudioChunk::MergeImpl,
          &AudioChunk::kDescriptorMethods,
          &descriptor_table_proto_2fprocessor_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AudioChunk::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AudioChunk_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::audioproc::AudioChunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes audio_data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AudioChunk, _impl_.audio_data_)}},
    // float start_time = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AudioChunk, _impl_.start_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float start_time = 1;
    {PROTOBUF_FIELD_OFFSET(AudioChunk, _impl_.start_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bytes audio_data = 2;
    {PROTOBUF_FIELD_OFFSET(AudioChunk, _impl_.audio_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:audioproc.AudioChunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audio_data_.ClearToEmpty();
  _impl_.start_time_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AudioChunk::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audioproc.AudioChunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float start_time = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_start_time = this->_internal_start_time();
  ::uint32_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_start_time(), target);
  }

  // bytes audio_data = 2;
  if (!this->_internal_audio_data().empty()) {
    const std::string& _s = this->_internal_audio_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audioproc.AudioChunk)
  return target;
}

::size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audioproc.AudioChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // bytes audio_data = 2;
  if (!this->_internal_audio_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_audio_data());
  }

  // float start_time = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_start_time = this->_internal_start_time();
  ::uint32_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AudioChunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioChunk*>(&to_msg);
  auto& from = static_cast<const AudioChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:audioproc.AudioChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_data().empty()) {
    _this->_internal_set_audio_data(from._internal_audio_data());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_start_time = from._internal_start_time();
  ::uint32_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    _this->_impl_.start_time_ = from._impl_.start_time_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audioproc.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudioChunk::InternalSwap(AudioChunk* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_data_, &other->_impl_.audio_data_, arena);
        swap(_impl_.start_time_, other->_impl_.start_time_);
}

::google::protobuf::Metadata AudioChunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace audioproc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2fprocessor_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
