syntax = "proto3";

package audioproc;

option go_package = "internal/audioprocproto";

service AudioProcessorService {
    rpc ProcessAudio(ProcessAudioRequest) returns (ProcessAudioResponse);
    rpc SplitIntoChunks (SplitAudioRequest) returns (SplitAudioResponse);
}

message AudioProcessingConfig {
    float threshold = 1;
    int32 margin = 2;
    float high_pass = 3;
    bool use_bandpass = 4;
    float band_low = 5;
    float band_high = 6;
    int32 fade_samples = 7;
    int32 sample_rate = 8;
}

message ProcessAudioRequest {
    bytes wav_data = 1;
    string file_name = 2;
    AudioProcessingConfig config = 3;
}

message ProcessAudioResponse {
    bytes wav_data = 1;
}

message SplitAudioRequest {
    bytes wav_data = 1;
    string file_name = 2;
    ChunkingConfig config = 3;
}

message ChunkingConfig {
    int32 sample_rate = 1;
    float threshold = 2;
    float chunk_min_duration_sec = 3;
    float chunk_max_duration_sec = 4;
    float overlap_duration_sec = 5;
}

message SplitAudioResponse {
    repeated AudioChunk chunks = 1;
}

message AudioChunk {
    float start_time = 1;
    bytes audio_data = 2;
}