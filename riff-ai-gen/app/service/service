from concurrent import futures
import grpc
import riff_pb2
import riff_pb2_grpc
import pretty_midi
from google.protobuf import empty_pb2

class RiffService(riff_pb2_grpc.RiffGeneratorServicer):
    def __init__(self, model_path):
        self.model = load_trained_model(model_path)
        self.style_mapping = {
            riff_pb2.ROCK: 1,
            riff_pb2.BLUES: 2,
            riff_pb2.METAL: 3,
            riff_pb2.JAZZ: 4,
            riff_pb2.FUNK: 5
        }
        self.tone_mapping = {'E': 1, 'A': 2, 'D': 3, 'G': 4}
        
    def _validate_request(self, request):
        if request.style == riff_pb2.UNSPECIFIED:
            raise grpc.RpcError(grpc.StatusCode.INVALID_ARGUMENT, 
                               "Style must be specified")
        if request.tone not in self.tone_mapping:
            raise grpc.RpcError(grpc.StatusCode.INVALID_ARGUMENT,
                               f"Invalid tone: {request.tone}")
        
    def GenerateRiff(self, request, context):
        try:
            self._validate_request(request)
            
            style_idx = self.style_mapping.get(request.style, 0)
            tone_idx = self.tone_mapping.get(request.tone, 0)
            
            generated = self.model.generate(
                style=style_idx,
                tone=tone_idx,
                temperature=0.7 if request.style in [riff_pb2.JAZZ, riff_pb2.FUNK] else 0.9
            )
            
            midi = self._events_to_midi(generated)
            return riff_pb2.RiffResponse(riff=midi.SerializeToString())
            
        except Exception as e:
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(f"Generation error: {str(e)}")
            return riff_pb2.RiffResponse()
    
    def _events_to_midi(self, events):
        midi = pretty_midi.PrettyMIDI()
        guitar = pretty_midi.Instrument(program=29)  # Distortion Guitar
        
        current_time = 0.0
        for event in events:
            if '_' in event:
                pitch, duration = event.split('_')
                note = pretty_midi.Note(
                    velocity=100,
                    pitch=int(pitch),
                    start=current_time,
                    end=current_time + float(duration)
                )
                guitar.notes.append(note)
                current_time += float(duration)
        
        midi.instruments.append(guitar)
        return midi