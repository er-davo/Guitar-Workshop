// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/note_analyzer.go
//
// Generated by this command:
//
//	mockgen -source=internal/clients/note_analyzer.go -destination=internal/mocks/mock_note_analyzer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	note_analyzer "tabgen/internal/proto/note-analyzer"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNoteAnalyzer is a mock of NoteAnalyzer interface.
type MockNoteAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockNoteAnalyzerMockRecorder
	isgomock struct{}
}

// MockNoteAnalyzerMockRecorder is the mock recorder for MockNoteAnalyzer.
type MockNoteAnalyzerMockRecorder struct {
	mock *MockNoteAnalyzer
}

// NewMockNoteAnalyzer creates a new mock instance.
func NewMockNoteAnalyzer(ctrl *gomock.Controller) *MockNoteAnalyzer {
	mock := &MockNoteAnalyzer{ctrl: ctrl}
	mock.recorder = &MockNoteAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteAnalyzer) EXPECT() *MockNoteAnalyzerMockRecorder {
	return m.recorder
}

// Analyze mocks base method.
func (m *MockNoteAnalyzer) Analyze(ctx context.Context, in *note_analyzer.AudioRequest, opts ...grpc.CallOption) (*note_analyzer.NoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Analyze", varargs...)
	ret0, _ := ret[0].(*note_analyzer.NoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Analyze indicates an expected call of Analyze.
func (mr *MockNoteAnalyzerMockRecorder) Analyze(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyze", reflect.TypeOf((*MockNoteAnalyzer)(nil).Analyze), varargs...)
}

// Close mocks base method.
func (m *MockNoteAnalyzer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNoteAnalyzerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNoteAnalyzer)(nil).Close))
}
