// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: note_analyzer.proto

package note_analyzer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AudioData     *AudioFileData         `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioRequest) Reset() {
	*x = AudioRequest{}
	mi := &file_note_analyzer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRequest) ProtoMessage() {}

func (x *AudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_note_analyzer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRequest.ProtoReflect.Descriptor instead.
func (*AudioRequest) Descriptor() ([]byte, []int) {
	return file_note_analyzer_proto_rawDescGZIP(), []int{0}
}

func (x *AudioRequest) GetAudioData() *AudioFileData {
	if x != nil {
		return x.AudioData
	}
	return nil
}

type NoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notes         []*NoteEvent           `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteResponse) Reset() {
	*x = NoteResponse{}
	mi := &file_note_analyzer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteResponse) ProtoMessage() {}

func (x *NoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_note_analyzer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteResponse.ProtoReflect.Descriptor instead.
func (*NoteResponse) Descriptor() ([]byte, []int) {
	return file_note_analyzer_proto_rawDescGZIP(), []int{1}
}

func (x *NoteResponse) GetNotes() []*NoteEvent {
	if x != nil {
		return x.Notes
	}
	return nil
}

type AudioFileData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	AudioBytes    []byte                 `protobuf:"bytes,2,opt,name=audio_bytes,json=audioBytes,proto3" json:"audio_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioFileData) Reset() {
	*x = AudioFileData{}
	mi := &file_note_analyzer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFileData) ProtoMessage() {}

func (x *AudioFileData) ProtoReflect() protoreflect.Message {
	mi := &file_note_analyzer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFileData.ProtoReflect.Descriptor instead.
func (*AudioFileData) Descriptor() ([]byte, []int) {
	return file_note_analyzer_proto_rawDescGZIP(), []int{2}
}

func (x *AudioFileData) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AudioFileData) GetAudioBytes() []byte {
	if x != nil {
		return x.AudioBytes
	}
	return nil
}

type NoteEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StartSeconds    float32                `protobuf:"fixed32,1,opt,name=start_seconds,json=startSeconds,proto3" json:"start_seconds,omitempty"` // Время начала ноты
	MidiPitch       int32                  `protobuf:"varint,2,opt,name=midi_pitch,json=midiPitch,proto3" json:"midi_pitch,omitempty"`           // Например, 40 = E2, 64 = E4 и т.д.
	Velocity        float32                `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`                             // Громкость/интенсивность (если доступно)
	DurationSeconds float32                `protobuf:"fixed32,4,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NoteEvent) Reset() {
	*x = NoteEvent{}
	mi := &file_note_analyzer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteEvent) ProtoMessage() {}

func (x *NoteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_note_analyzer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteEvent.ProtoReflect.Descriptor instead.
func (*NoteEvent) Descriptor() ([]byte, []int) {
	return file_note_analyzer_proto_rawDescGZIP(), []int{3}
}

func (x *NoteEvent) GetStartSeconds() float32 {
	if x != nil {
		return x.StartSeconds
	}
	return 0
}

func (x *NoteEvent) GetMidiPitch() int32 {
	if x != nil {
		return x.MidiPitch
	}
	return 0
}

func (x *NoteEvent) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *NoteEvent) GetDurationSeconds() float32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

var File_note_analyzer_proto protoreflect.FileDescriptor

const file_note_analyzer_proto_rawDesc = "" +
	"\n" +
	"\x13note_analyzer.proto\x12\vnoteanlyzer\"I\n" +
	"\fAudioRequest\x129\n" +
	"\n" +
	"audio_data\x18\x01 \x01(\v2\x1a.noteanlyzer.AudioFileDataR\taudioData\"<\n" +
	"\fNoteResponse\x12,\n" +
	"\x05notes\x18\x01 \x03(\v2\x16.noteanlyzer.NoteEventR\x05notes\"M\n" +
	"\rAudioFileData\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\x12\x1f\n" +
	"\vaudio_bytes\x18\x02 \x01(\fR\n" +
	"audioBytes\"\x96\x01\n" +
	"\tNoteEvent\x12#\n" +
	"\rstart_seconds\x18\x01 \x01(\x02R\fstartSeconds\x12\x1d\n" +
	"\n" +
	"midi_pitch\x18\x02 \x01(\x05R\tmidiPitch\x12\x1a\n" +
	"\bvelocity\x18\x03 \x01(\x02R\bvelocity\x12)\n" +
	"\x10duration_seconds\x18\x04 \x01(\x02R\x0fdurationSeconds2O\n" +
	"\fNoteAnalyzer\x12?\n" +
	"\aAnalyze\x12\x19.noteanlyzer.AudioRequest\x1a\x19.noteanlyzer.NoteResponseB\x1eZ\x1cinternal/proto/note-analyzerb\x06proto3"

var (
	file_note_analyzer_proto_rawDescOnce sync.Once
	file_note_analyzer_proto_rawDescData []byte
)

func file_note_analyzer_proto_rawDescGZIP() []byte {
	file_note_analyzer_proto_rawDescOnce.Do(func() {
		file_note_analyzer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_note_analyzer_proto_rawDesc), len(file_note_analyzer_proto_rawDesc)))
	})
	return file_note_analyzer_proto_rawDescData
}

var file_note_analyzer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_note_analyzer_proto_goTypes = []any{
	(*AudioRequest)(nil),  // 0: noteanlyzer.AudioRequest
	(*NoteResponse)(nil),  // 1: noteanlyzer.NoteResponse
	(*AudioFileData)(nil), // 2: noteanlyzer.AudioFileData
	(*NoteEvent)(nil),     // 3: noteanlyzer.NoteEvent
}
var file_note_analyzer_proto_depIdxs = []int32{
	2, // 0: noteanlyzer.AudioRequest.audio_data:type_name -> noteanlyzer.AudioFileData
	3, // 1: noteanlyzer.NoteResponse.notes:type_name -> noteanlyzer.NoteEvent
	0, // 2: noteanlyzer.NoteAnalyzer.Analyze:input_type -> noteanlyzer.AudioRequest
	1, // 3: noteanlyzer.NoteAnalyzer.Analyze:output_type -> noteanlyzer.NoteResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_note_analyzer_proto_init() }
func file_note_analyzer_proto_init() {
	if File_note_analyzer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_note_analyzer_proto_rawDesc), len(file_note_analyzer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_note_analyzer_proto_goTypes,
		DependencyIndexes: file_note_analyzer_proto_depIdxs,
		MessageInfos:      file_note_analyzer_proto_msgTypes,
	}.Build()
	File_note_analyzer_proto = out.File
	file_note_analyzer_proto_goTypes = nil
	file_note_analyzer_proto_depIdxs = nil
}
