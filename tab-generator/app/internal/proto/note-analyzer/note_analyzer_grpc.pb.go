// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: note_analyzer.proto

package note_analyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NoteAnalyzer_Analyze_FullMethodName = "/noteanlyzer.NoteAnalyzer/Analyze"
)

// NoteAnalyzerClient is the client API for NoteAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteAnalyzerClient interface {
	Analyze(ctx context.Context, in *AudioRequest, opts ...grpc.CallOption) (*NoteResponse, error)
}

type noteAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteAnalyzerClient(cc grpc.ClientConnInterface) NoteAnalyzerClient {
	return &noteAnalyzerClient{cc}
}

func (c *noteAnalyzerClient) Analyze(ctx context.Context, in *AudioRequest, opts ...grpc.CallOption) (*NoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteResponse)
	err := c.cc.Invoke(ctx, NoteAnalyzer_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteAnalyzerServer is the server API for NoteAnalyzer service.
// All implementations must embed UnimplementedNoteAnalyzerServer
// for forward compatibility.
type NoteAnalyzerServer interface {
	Analyze(context.Context, *AudioRequest) (*NoteResponse, error)
	mustEmbedUnimplementedNoteAnalyzerServer()
}

// UnimplementedNoteAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoteAnalyzerServer struct{}

func (UnimplementedNoteAnalyzerServer) Analyze(context.Context, *AudioRequest) (*NoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedNoteAnalyzerServer) mustEmbedUnimplementedNoteAnalyzerServer() {}
func (UnimplementedNoteAnalyzerServer) testEmbeddedByValue()                      {}

// UnsafeNoteAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteAnalyzerServer will
// result in compilation errors.
type UnsafeNoteAnalyzerServer interface {
	mustEmbedUnimplementedNoteAnalyzerServer()
}

func RegisterNoteAnalyzerServer(s grpc.ServiceRegistrar, srv NoteAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedNoteAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NoteAnalyzer_ServiceDesc, srv)
}

func _NoteAnalyzer_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteAnalyzerServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteAnalyzer_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteAnalyzerServer).Analyze(ctx, req.(*AudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteAnalyzer_ServiceDesc is the grpc.ServiceDesc for NoteAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noteanlyzer.NoteAnalyzer",
	HandlerType: (*NoteAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _NoteAnalyzer_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note_analyzer.proto",
}
