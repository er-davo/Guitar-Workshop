// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: tab.proto

package tab

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TabGenerate_GenerateTab_FullMethodName = "/tab.TabGenerate/GenerateTab"
)

// TabGenerateClient is the client API for TabGenerate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TabGenerateClient interface {
	GenerateTab(ctx context.Context, in *TabRequest, opts ...grpc.CallOption) (*TabResponse, error)
}

type tabGenerateClient struct {
	cc grpc.ClientConnInterface
}

func NewTabGenerateClient(cc grpc.ClientConnInterface) TabGenerateClient {
	return &tabGenerateClient{cc}
}

func (c *tabGenerateClient) GenerateTab(ctx context.Context, in *TabRequest, opts ...grpc.CallOption) (*TabResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TabResponse)
	err := c.cc.Invoke(ctx, TabGenerate_GenerateTab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TabGenerateServer is the server API for TabGenerate service.
// All implementations must embed UnimplementedTabGenerateServer
// for forward compatibility.
type TabGenerateServer interface {
	GenerateTab(context.Context, *TabRequest) (*TabResponse, error)
	mustEmbedUnimplementedTabGenerateServer()
}

// UnimplementedTabGenerateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTabGenerateServer struct{}

func (UnimplementedTabGenerateServer) GenerateTab(context.Context, *TabRequest) (*TabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTab not implemented")
}
func (UnimplementedTabGenerateServer) mustEmbedUnimplementedTabGenerateServer() {}
func (UnimplementedTabGenerateServer) testEmbeddedByValue()                     {}

// UnsafeTabGenerateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TabGenerateServer will
// result in compilation errors.
type UnsafeTabGenerateServer interface {
	mustEmbedUnimplementedTabGenerateServer()
}

func RegisterTabGenerateServer(s grpc.ServiceRegistrar, srv TabGenerateServer) {
	// If the following call pancis, it indicates UnimplementedTabGenerateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TabGenerate_ServiceDesc, srv)
}

func _TabGenerate_GenerateTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabGenerateServer).GenerateTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabGenerate_GenerateTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabGenerateServer).GenerateTab(ctx, req.(*TabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TabGenerate_ServiceDesc is the grpc.ServiceDesc for TabGenerate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TabGenerate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tab.TabGenerate",
	HandlerType: (*TabGenerateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTab",
			Handler:    _TabGenerate_GenerateTab_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tab.proto",
}
